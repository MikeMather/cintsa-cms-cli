Resources:
  # Cognito user pool and identity pool for site-editor authorization
  CintsaUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: cintsa-{{appName}}-user-pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
          TemporaryPasswordValidityDays: 1

  CintsaUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: cintsa-{{appName}}-user-pool-client
      UserPoolId: !Ref CintsaUserPool

  CintsaIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: cintsa-{{appName}}-identity-pool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CintsaUserPoolClient
          ProviderName: !GetAtt CintsaUserPool.ProviderName

  # IAM role used for authenticated users
  CintsaAuthRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: CintsaIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: 'CognitoAuthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'
              
              # S3 bucket for firmware files
              - Effect: 'Allow'
                Action:
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:DeleteObjects'
                  - 's3:ListObjectsV2'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: !Sub ${CintsaS3Bucket.Arn}/*

  # IAM roles
  CintsaIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CintsaIdentityPool
      Roles:
        authenticated: !GetAtt CintsaAuthRole.Arn
      

  # S3 bucket for hosting the site
  CintsaS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: {{domainName}}
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: 
              - '*'
            AllowedMethods: 
              - 'GET'
              - 'PUT'
              - 'POST'
              - 'DELETE'
            MaxAge: 3000
            ExposedHeaders: 
              - 'x-amz-server-side-encryption'
              - 'x-amz-request-id'
              - 'x-amz-id-2'
              - 'ETag'
            AllowedHeaders: 
              - '*'

  # Bucket Policy allows public access except for /admin folder
  CintsaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CintsaS3Bucket
      PolicyDocument:
        Id: CintsaStaticHost
        Version: 2012-10-17
        Statement:
          - Sid: AllowCloudfrontAccess
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CintsaOriginAccessIdentity}'
            Action: 
              - 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${CintsaS3Bucket}/*'
          - Sid: AllowAdminAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt CintsaAuthRole.Arn 
            Action: 
              - 's3:PutObject'
              - 's3:DeleteObject'
              - 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${CintsaS3Bucket}/admin/*'
          - Sid: RestrictAdminFolder
            Effect: Deny
            NotPrincipal:
              AWS: !GetAtt CintsaAuthRole.Arn 
            Action: 
              - 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${CintsaS3Bucket}/admin/*'

  CintsaOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref CintsaS3Bucket

  CintsaCDN:
    Type: AWS::CloudFront::Distribution
    DependsOn: CintsaS3Bucket
    Properties:
      DistributionConfig:
        Comment: Cloudfront distribution for S3-hosted static site
        Enabled: 'true'
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: 'true'
          TargetOriginId: !Ref CintsaS3Bucket
          ViewerProtocolPolicy: allow-all
        DefaultRootObject: index.html
        Origins:
          - DomainName: !Sub '${CintsaS3Bucket}.s3-website-${AWS::Region}.amazonaws.com'
            Id: !Ref CintsaS3Bucket
            S3OriginConfig:
              OriginAccessIdentity: !Ref CintsaOriginAccessIdentity
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: https-only

Outputs:
  CintsaUserPool:
    Description: The User pool to associate the CMS with
    Value: !Ref CintsaUserPool
    Export:
      Name: {{appName}}-CintsaUserPoolId
  CintsaUserPoolClient:
    Description: The User pool client to associate the CMS with
    Value: !Ref CintsaUserPoolClient
    Export:
      Name: {{appName}}-CintsaUserPoolClientId
  CinstaIdentityPoolId:
    Description: ID of the Cintsa Cognito identity ppol
    Value: !Ref CintsaIdentityPool
    Export:
      Name: {{appName}}-CintsaIdentityPoolId
  CintsaWebsiteURL:
    Description: URL for website hosted on S3 with Cintsa CMS
    Value: !GetAtt 
      - CintsaCDN
      - DomainName
    Export:
      Name: {{appName}}-CintsaWebsiteURL